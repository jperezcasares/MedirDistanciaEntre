# -*- coding: utf-8 -*-
"""
/***************************************************************************
 MedirDistanciaEntreDialog
                                 A QGIS plugin
 Plugin para medir la distancia mínima entre dos entidades.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2022-05-01
        git sha              : $Format:%H$
        copyright            : (C) 2022 by José A. Pérez Casares
        email                : jperezcasares_at_gmail_com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
from qgis.PyQt.QtCore import pyqtSignal, pyqtSlot
from qgis.PyQt.QtCore import Qt

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'medir_distancia_entre_dialog_base.ui'))


class MedirDistanciaEntreDialog(QtWidgets.QDialog, FORM_CLASS):
	reset = pyqtSignal()
	close  = pyqtSignal()
	handleButton = pyqtSlot(QtWidgets.QAbstractButton)

	def __init__(self, parent=None):
		"""Constructor."""
		super(MedirDistanciaEntreDialog, self).__init__(parent)
		# Set up the user interface from Designer through FORM_CLASS.
		# After self.setupUi() you can access any designer object by doing
		# self.<objectname>, and you can use autoconnect slots - see
		# http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
		# #widgets-and-dialogs-with-auto-connect
		self.setupUi(self)
		self.setWindowFlags(self.windowFlags() | Qt.Tool | Qt.WindowStaysOnTopHint)

	def handleButton(self, button):
		if button == self.button_box.button(QtWidgets.QDialogButtonBox.Reset):
			self.reset.emit()
		"""elif button == self.button_box.button(QtWidgets.QDialogButtonBox.Close):
			self.close.emit()"""
